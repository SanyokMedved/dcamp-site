<?php

/**
 * @file
 * Contains dckyiv_commerce.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\commerce_order\Entity\OrderItemInterface;
use Drupal\paragraphs\Entity\Paragraph;

/**
 * Implements hook_help().
 */
function dckyiv_commerce_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the dckyiv_commerce module.
    case 'help.page.dckyiv_commerce':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('DCKyiv commerce custom code') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_type_build().
 */
function dckyiv_commerce_entity_type_build(array &$entity_types) {
  $entity_types['commerce_order_item']->setFormClass('add_to_cart', '\Drupal\dckyiv_commerce\Form\AddToCartForm');
  $entity_types['paragraph']->setFormClass('edit_attendee', '\Drupal\dckyiv_commerce\Form\EditAttendeeForm');
}

/**
 * Implements hook_views_data_alter().
 */
function dckyiv_commerce_views_data_alter(array &$data) {
  $data['commerce_order_item']['edit_tshirt_size']['field'] = [
    'title' => t('Tshirt size select field'),
    'help' => t('Adds a select field for editing the tshirt size.'),
    'id' => 'commerce_order_item_edit_tshirt_size',
  ];
}

/**
 * Implements hook_ENTITY_TYPE_presave();
 */
function dckyiv_commerce_commerce_order_item_presave(OrderItemInterface $commerce_order_item) {
  if ($commerce_order_item->bundle() != 'drupal_camp_ticket') {
    return;
  }
  
  $quantity = (int) $commerce_order_item->getQuantity();
  $items = $quantity;
  $field_value = $commerce_order_item->get('field_attendee');
  if (!empty($field_value)
    && $field_value->count() > $quantity) {
    $items = $field_value->count();
  }
  
  for ($delta = 0; $delta < $items; $delta++) {
    $paragraph = Paragraph::create([
      'type' => 'attendee',
    ]);
    $paragraph->is_new = TRUE;
    $paragraph->save();
    $commerce_order_item->field_attendee[$delta] = [
      'target_id' => $paragraph->id(),
      'target_revision_id' => $paragraph->getRevisionId(),
    ];
    
    if ($delta >= $quantity) {
      $value = $commerce_order_item->field_attendee[$delta]->getValue();
      $paragraph = empty($value['target_id']) ? NULL : Paragraph::load($value['target_id']);
      if (!empty($paragraph)) {
        $paragraph->delete();
        $commerce_order_item->field_attendee[$delta] = NULL;
      }
    }
  }
}
